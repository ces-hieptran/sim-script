#!/bin/sh
# Purpose: rebuild service and run service again when edit *.properties files
# Author: HiepTran

# todo: export workspace folder

current=$(dirname $0)
workDir=$current/work-dir.txt
defaultComposeFile=docker-compose.yml
jrebelComposeFile=docker-compose-with-jrebel.yml

sim_get(){
	if [ $(cat $workDir) ]
    		then 
    			cat $workDir
    		else 
    			echo    Please set Project or Worktree in SIM Workspace
  			echo    - $SIM_WORKSPACE -
    		fi
}

sim_set(){

	if echo $(pwd) | grep -q $SIM_WORKSPACE;
 	then
 		if [ "$(cat $workDir)" != "$(pwd)" ]
 		then 
 			temp=$(pwd);
 			stop;
  			echo $temp > $workDir;
			echo $temp;
			return 0;
		else
			sim_get;
		fi
	else
		echo    Wrong folder!
		echo    Please set Project or Worktree in SIM Workspace
		echo    - $SIM_WORKSPACE -
		return 1;
	fi
}

sim_key(){

	if [ $(cat $workDir) ]
	then
		license=license.xml
		cp $current/$license $(sim get)/liferay/build/docker/deploy/$license
		return 0;
	else
	        echo "Please set Project or Worktree directory"
	        echo    - $SIM_WORKSPACE -
	        return 1;
	fi
}

sim_key_setup(){

	if [ $(cat $workDir) ]
	then
		license=license.xml
		cp $current/$license $(sim get)/liferay/configs/common/osgi/marketplace/$license
		return 0;
	else
	        echo "Please set Project or Worktree directory"
	        echo    - $SIM_WORKSPACE -
	        return 1;
	fi
}

sim_file(){
	if [ $(cat $workDir) ]
	then
	  	path=$(sim_get)
	  	composeFile=$1
	  	nginx=nginx.conf
	  	license=license.xml
	  	gradle=gradle.properties
	  	
	  	cp $current/$composeFile $(sim_get)/$defaultComposeFile
	  	cp $current/$nginx $(sim_get)/webserver/configs/local/$nginx
	  	cp $current/$license $(sim get)/liferay/configs/common/osgi/marketplace/$license
	  	cp $current/$gradle $(sim get)/liferay/$gradle
	  	return 0;
	else
	  	echo "Please set Project or Worktree directory"
		echo    - $SIM_WORKSPACE -
		return 1;
	fi
}

sim_setup(){
	currentWorkSpace=$(pwd)
	
	sim_set && cd $(sim_get) && sim_key_setup && sim_file $1
	
	if [ ! -d "$(sim_get)/liferay/build/docker" ]
	then
		cd $currentWorkSpace/liferay && ./gradlew clean createDockerfile --info			
	fi
	cd $(sim_get)	
}

sim_clean_server(){
	cd $(sim_get)
	docker-compose down --rmi local;
	return 0;
}

sim_clean_local(){
	cd $(sim_get)
	docker-compose down --rmi local -v;
	return 0;
}

sim_clean_git(){
	cd $(sim_get)
	git restore docker-compose.yml liferay/gradle.properties;
	rm liferay/configs/common/osgi/marketplace/license.xml webserver/configs/local/nginx.conf liferay/modules/java_pid*.hprof;
	return 0;
}


stop(){
	cd $(sim_get)
	docker-compose stop;
	return 0;
}

if [ -z $1 ]
then
    echo '  set		    Set Project or Worktree folder'
    echo '  get		    Get current Project or Worktree folder working on'
    echo '  run      	    Run all container in docker-compose'
    echo '  stop		    Stop server (not remove any thinks)'
    echo '  key		    Copy license.xml file to docker deploy folder'
    echo '  file  [jrebel]    Update docker-compose file to Debug and Deploy'
    echo '  setup [jrebel]    Setup all think need for Development'
    echo '  clean - server    Clean all just keep Database '
    echo '        - all       Clean everythink (container && image && volume)'
    echo '        - git       Clean docker-compose and license file'
    
elif [ -n $1 ]
then
    

    case $1 in
    	'get'| 1 )
    		sim_get;;
    	'set'| 2) 	
    		sim_set;;
    	'key'| 3)
		sim_key;;	
    	'file'| 4)	
    		if [ -z $2 ]
    		then 
	    		sim_file;
	    	elif [ $2 = 'jrebel' ]
	    	then
	    		sim_jrebel_file;
	    	fi;;	
		
	'stop'| 5)	
		stop;;
    	'setup' | 6)	
    		if [ -z $2 ]
    		then 
    			sim_setup $defaultComposeFile;
	    	elif [ $2 = 'jrebel' ]
	    	then
	    		sim_setup $jrebelComposeFile;
	    	fi;;
    	'clean' | 7)	
    		if [ -n $2 ]
    		then
    			case $2 in
    			'all' )
    				sim_clean_local;;
    			'server')
    				sim_clean_server;;
    			'git')
    				sim_clean_git;;
    			*)
    				echo This is not a options. Please try again.
    			esac
    		fi
    		;;
    	'run' | 8)
    		 cd $(sim_get) && sim file && (docker-compose start || docker-compose up -d) && docker-compose logs -f liferay;;
    	*)
    		echo This is not a options. Please try again.
    esac
fi
